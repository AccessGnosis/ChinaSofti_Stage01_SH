List接口：记录元素的添加顺序，允许元素重复。

Set接口：不记录元素添加的顺序，不允许元素的重复。
	HashSet接口：不保证元素添加的先后顺序
	判断对象是否相等：
		1）equals比较结果为true
		2）hashCode值相等
		
需求：不允许元素重复，但是需要记录元素的添加顺序。
	LinkedHashSet类：不允许元素的重复，但是需要记录元素的添加顺序。
		哈希表：来保证集合中元素的唯一性，此时相当于HashSet，在哈希表中元素是没有先后顺序的。
		链表：来记录元素的先后添加顺序。
TreeSet集合底层是红黑树算法，会对存储的元素默认使用自然排序（从小到大）
				数据类型							排序规则
	Integer,Byte,Short,Float				按数字大小排序
	Double,Long,BigDecimal,BigInteger
			Character(字符)					按字符的Unicode值的大小排序
			String(字符串)					按字符的Unicode值的大小排序
TreeSet：自然排序（从小到大）
	TreeSet调用集合元素的compareTo()方法来比较元素的大小的，然后按照元素的升序排序（从小到大）。
	要想排序需要实现Comparable接口，重写里面的compareTo(Object o)方法。在该方法中编写自己的排序规则。
		在该方法中，比较当前对象（this）和参数对象o作比较（严格来说比较的是对象中的数据），比如按对象的分数比较。
		this > 0	：	返回正整数，1
		this < 0	：	返回负整数，-1
		this = 0	：	返回0，此时认为两个对象为同一个对象
		
TreeSet：定制排序（比如从大到小，按名字的长短来排序）
	在TreeSet构造器中传递java.lang.Comparator对象，并覆盖compare()方法，再编写比较规则。
	对于TreeSet集合来说，要么使用自然排序，要么定制排序。
	
	判断两个对象是否相等的原则：
		自然排序：compareTo方法	返回是return 0;
		定制排序：compare方法	返回是return 0;
		
Set接口：
	包含：HashSet(重点), LinkedHashSet, TreeSet
		共同特点：
			1）元素不允许重复；
			2）都是线程不安全的；
		解决方法：Set set = Collections.synchronizedSet(new HashSet());
		
		HashSet：不记录元素的添加的先后顺序，集合中的元素对象不能重复。底层采用哈希表算法。
			如何判断两个对象是否相等的规则：
				1）equals比较，比较结果为true说明相等
				2）hashCode值相等，说明两个对象相等
			注意：要求存在哈希表中的对象都必须重写equals方法和hashCode方法。
			
		LinkedHashSet：该类是HashSet类的子类，底层也是采用哈希表算法（保证元素不重复），但也采用了链表算法（保证记录保存顺序）。
			记录元素的添加的先后顺序，不允许元素重复。
			判断两个对象是否相等的规则和HashSet是否相同。
				1）equals比较，比较结果为true说明相等
				2）hashCode值相等，说明两个对象相等
			该类的性能较HashSet低，原因是使用了一个链表算法保证元素的有序。
			
			该类很少使用，只在要求一个集合既要保证元素的不重复性，又要记录元素的添加的先后顺序，才会使用LinkedHashSet。
			
		TreeSet：不记录元素添加的先后顺序，不允许元素重复，但会集合的元素做排序操作。
			底层采用的是红黑树算法。（平衡二叉树，树结构，比较擅长范围查询）
			TreeSet要么做自然排序，要么做定制排序。
			自然排序：要求在TreeSet集合中的对象必须去实现java.lang.Compareable接口并重写compareTo()方法。
			定制排序：要求在构建TreeSet对象的时候传入一个比较器对象java.lang.Comparator接口，并重写compare()方法并编写比较规则。
			判断对象是否相等的规则：
				compare/compareTo方法是否返回0，如果返回的是0，则视为同一个对象。否则，反之。
				
			注意：HashSet做等值查询效率高，TreeSet做范围查询效率高。
			
Map（映射）集合：
	假设：有A，B两个非空集合，如果存在一个法则f，使得A集合中的每个元素a，
		按法则f在B集合中都有一个唯一的元素b与之对应，则称f为从A到B的映射，写为：f:A->B
		映射关系：两个集合（A集合和B集合）
			A集合中的每一个元素都会在B集合中找到唯一与之对应的一个值。
			A集合中的元素不可以重复，而B集合中的元素是可以重复的。
	Map有多个Entry（键值对）组成。把多个Entry看成一个集合。
	
		Map严格来说不是集合，而是两个集合之间的映射关系。（因为Map接口并没有继承Collection接口）
			然而因为Map可以存储数据（存储的是A集合中的一个元素作为key，B集合中的一个元素作为value），所以我们习惯称之为Map集合。
			
		Map集合中的常用类：
			HashMap：采用哈希算法，此时Map中的key不会记录添加的先后顺序，且key也不会重复。
				key的判断重复的标准是：key1和key2是否equals的值为true，并且hashCode相等。
			TreeMap：采用的是红黑树算法，此时Map中的key会按照自然排序或者定制排序进行排序，且key也不能重复。
				key值判断重复的标准是：compareTo()方法和compare()方法的返回值为0。
			LinkedHashMap：采用的哈希算法和链表算法，此时，Map中的key会记录先后顺序，key不允许重复。
				key值判断重复的标准是：和HashMap中的一样。
			HashTable：采用的哈希表算法，是HashMap的前身（类似于Vector是ArrayList的前身），此算法使用率较低。
				HashTable中的方法是线程安全的（所有的方法都被synchronized修饰），性能较低。
			Properties：HashTable的子类，此时要求key和value都必须是字符串。
				用来加载资源文件（properties文件）
			
			注意：一般情况下，定义Map集合时，key都使用String类型（不可变），把key作为value的唯一名称。
			
			HashMap, LinkedHashMap, TreeMap都是线程不安全的。但性能高。
			解决方案：
				Map map = Collections.synchronizedMap(Map对象);
			HashTable:是线程安全的，但性能较低，使用频率较低。
			
			哈希表算法：做等值查询较快。
			数据结构算法，红黑树：做范围查询较快-->应用到索引上。
			
List, Set, Map:
	选用哪一种容器取决于每一种容器存储的特点及当前业务特点：
	List：单一元素的集合：允许元素重复/记录添加元素的顺序。
	Set：单一元素的集合：不允许元素重复/不记录添加元素的顺序。
	LinkedHashSet：元素既不重复，又要保证记录添加元素的顺序。
	Map：双元素集合，如果存储数据的时候，还得给数据起一个名称，此时考虑Map。
	
List，Set，Map之间的相互转换：
	List list = new ArrayList();
	//把list集合转换为set集合：List-->Set
	Set set = new HashSet(list);
	//把set集合转换为list集合：Set-->List
	list = new ArrayList(set);
	map不能直接转换为list或set集合，但可以将map间接地转换为set或list
	
集合的工具类：（Collection接口和Collections集合类）
	1）Arrays：
		把集合转换为数组：
			Object[] arr = 集合对象.toArray();
		把数组转换为集合（List集合）：
			List list = Arrays.asList("A", "B", "C");
	2）Collections：
		封装了Set，List，Map的操作工具方法。
		
作业：
	计算一个字符串中每一个字符出现的次数。使用Map输出
线程：
//需求：如果想开发一款软件，能边打游戏边听音乐。

并发和并行：既有相似点又有不同点。
	并发：指两个对象或多个对象在同一时间段内发生，强调的时间段。（微观上说的）宏观上说并发看起来是一起的。
	并行：指两个对象或多个对象在同一时刻发生，强调的是时间点。

要解决多个程序的并发操作――――>进程和线程
	进程：是指在一个内存中的应用程序，每个进程都有自己独立的一块内存空间。一个应用程序可以包含多个进程。比如在Windows系统下，一个运行的xxx.exe就是一个进程。
	线程：是指进程中的一个执行任务（控制单元），一个进程可以包含多个线程。如多线程下载。
		一个进程至少包含一个线程，为了提高效率，可以在一个进程中开启多个线程，即多线程。
	多进程：操作系统中同时运行的多个程序。
	多线程：在一个进程中同时运行的多个任务单元。
//面试题：
	进程和线程的区别：
		进程：有独立的内存空间，进程中的数据存放空间（堆空间和栈空间）是独立的，里面至少包含一个线程。
		线程：堆空间是共享的，栈空间是独立的，线程消耗资源要比进程小，相互之间可以影响，又称为轻型的或微观的进程。
		
	多线程的并发问题：
		在一个进程中有多个线程，宏观上多线程同时运行，微观上是有先后顺序的，哪个线程先执行？完全取决于cpu调度，程序员控制不了，
		我们可以把多线程的并发性看成是多线程在瞬间抢cpu的资源，谁抢到谁运行，这就造成了多线程的随机性。
		
	多线程作为一种多任务，并发的工作方式，有其存在的优势？
	1）提高应用程序的相应；
	2）使多cpu系统更加有效：
		操作系统会保证当线程数不大于cpu数目时，不同的线程运行于不同的cpu上。
	3）改善程序的结构。
	
创建和启动线程：
	线程的创建有两种传统的方式：
		1.继承java.lang.Thread类：
			步骤：
				1）自定义一个类(Music)，是该类继承于java.lang.Thread类
				2）重写Thread类中的run()方法，并在方法内编写播放音乐的代码
				3）在main中编写打游戏的代码
				4）在main中创建Music的线程，并启动线程
			注意：启动线程，只能调用线程对象的start()方法，不能调用run()方法。
				哪一个线程先执行，执行多久，完全取决于cpu/线程调度器，我们无法干预。
				
		2.实现java.lang.Runnable接口
			步骤：
				1）自定义一个类(Music)，实现java.lang.Runnable接口
				2）重写run()方法，在run()方法中编写播放音乐的代码
				3）在main中编写打游戏的代码
				4）在main中创建Music的线程，并启动线程
			
对比继承和实现类创建线程的区别？
	//需求：有100个苹果，叫三个同学来拿，每次只能拿一个。
	1）从完成功能上来说，两个都可以。
	2）从简单易用方面，继承方式更简单。
	3）继承方式无法共享同一份资源，而实现方式可以（共享100个苹果）。
	4）在Java中，类是单继承的，接口可以多实现，所以接口更方便。
	
	若：1）该类还需要继承其他类
	   2）多个线程需要共享同一个资源
	   		此时，只能用Runnable接口，其他情况，任选，一般推荐使用Runnable接口。
	   		
	多线程会出现并发问题：
		多个线程并发访问同一个共同资源的时候，可能会出现线程安全问题。
		
		在Java中，解决多线程并发访问同一个资源时出现的安全性问题，解决方式如下：
			1）同步代码块
			2）同步方法
			3）从Java5开始，锁机制
			
			synchronized:是一个访问修饰的关键字，能够解决多线程并发的安全问题，但是性能低。
			同一方法：
				如果使用synchronized修饰，则该方法安全性高，性能低。
				若不使用synchronized修饰，则安全性低，性能高。
			StringBuffer:线程安全的，但是性能较低，适合多线程环境
			StringBuilder:线程不安全的，但是性能高，适合单线程环境
		
		方式1：使用同步代码块（使用synchronized修饰的代码块）
			synchronized(同步监听对象){
				需要同步的代码;
			}
		此时，同步监听的对象指代，多线程共同访问的那一份资源（共享资源）。
		方法2：同步方法：（使用synchronized修饰的方法）
			synchronized public 返回类型 方法名(参数列表){
				方法体//需要同步的代码
			}
			同步方法的同步监听对象是谁？
				1）若同步方法是非static修饰的方法，此时监听的对象是this
				2）若同步方法是static修饰的方法，此时监听的对象是：当前方法所在类的字节码对象
			设计模式：单例模式 --> 饿汉式和懒汉式
		方法3：使用锁机制
			从java5开始使用
			ReentrantLock:
				一个可重入的互斥锁Lock，它具有与使用synchronized方法和语句所访问的隐式监视器锁相同的一些基本行为和语义，但功能更强大。
				//共享资源的对象
				class X {//共享资源的对象
					private final ReentrantLock lock = new ReentrantLock();//创建一把锁
					
					public void m(){//需要做的同步方法
						lock.lock();//获取锁，加锁
						try{
							//需要同步的代码
						}finally{
							lock.unlock();//释放锁
						}
					}
				}
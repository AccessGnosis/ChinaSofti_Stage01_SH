异常：
	生活中的异常：某个部位和正常情况下出现了偏差，也就是不能正常工作了。
	程序中的异常：指程序出现了非正常的情况，会导致程序的退出（JVM停止）---->处理异常
	
通过Eclipse等开发工具编写的代码，代码中如果出现红色的叉---->语法错误，语法错误，是无法去编译的，无法运行。

异常体系：Error和Exception
	Error:指JVM出现不可恢复的错误（JVM退出，停止运行），程序员是不能解决error错误的，只能避免。
		所有的子类，基本都是以Error作为后缀结尾的。XxxXxxError。除了ThreadDeath。
	Exception:指程序中因操作不当，出现的非正常情况，我们必须得处理异常。
		所有的子类，都是以Exception作为后缀。XxxXxxException。
	为了方便管理所有的异常，把java中的每一种异常都封装成一个Java类，异常有很多--->异常类也很多
	
	Throwable: Error(我们不能处理，只能避免)和Exception(需要我们处理)

捕获和处理异常：
	处理异常的语法结构：try...catch...
		try{
			编写的可能会出现异常的代码;
		} catch(异常的类型  变量) {
			处理异常的逻辑；
		}
	当：try语句块中出现了异常A类型，就会进入捕获异常的catch语句，捕获并处理。
	
	在开发中，经常遇到处理多种异常的情况。
		try{
			编写的可能会出现异常的代码;
		} catch(异常类型A 变量) {
			处理异常A：区域
		} catch(异常类型B 变量) {
			处理异常B：
		}
	注意：代码同时只能出现一种异常，不可能同时抛出多种异常，
		所以出现A类异常，就进入A区域，若出现B类异常，则进入B区域。
		
		多个catch的时候，必须子类在前父类在后。Exception写在最后。
		一旦子类捕获到异常，其后面的catch()异常全部跳过。
		
finally关键字：
	finally关键字：用于表示一个代码块，特点：无论是否有异常，最终都会执行的finally代码块。
	目的：释放资源，一般用于网络，数据库，IO等等在最终的时候，关闭资源。
	语法1：try--finally
		try{
			//可能出现异常的代码
		} finally {
			//释放资源的代码
		}
	语法2：try--catch--finally
		try{
			//可能出现异常的代码
		} catch(异常类型A 变量) {
			//捕获并处理异常的代码
		} finally {
			//释放资源的代码
		}
	finally中如果有return语句，永远返回的是finally中的结果。
	面试题：
		1）Error和Exception的区别：
		2）final，finally，finalize的区别：
			final是修饰符，表示最终的，不可改变的。final修饰类，类不能被继承，修饰方法，方法不能被重写，修饰变量，变量不能被改变。
			finally是一个代码块，使用时必须和try连用，自己不能单独使用。无论是否有异常都会执行finally代码块。目的是释放资源。
			finalize是一个方法，Object类里的方法，当一个对象被垃圾回收器回收的时候，就会调该对象的finalize方法。通过jvm自动调取，System.gc();调用。
		3）无论是否有异常，finally代码块都会执行么？如果有错，那特殊情况是什么？
			System.exit(0);
抛出异常：
	1）使用throw在方法内部，抛出一个异常对象。
		throw:运用于方法内部，用于给调用者返回一个异常对象，和return一样并结束当前方法。return返回的是一个值，throw返回的是一个异常对象，返回给方法的调用者。
	2）使用throws在方法声明上，抛出一个异常类型。
		throws：运用于方法声明之上，用于表示当前方法不处理这个异常对象，而是提醒方法的调用者来处理异常/抛出异常。
		如果每一个方法都放弃处理该异常，直接用throws往外抛，最后异常会抛给main()方法。
		如果main()方法还不处理，继续抛出，最后给JVM虚拟机，虚拟机调用底层代码打印该异常的栈信息。
	
	当某一个方法内部，出现错误的时候，并且不知道如何返回值，
		此时我们就使用throw返回一个异常对象。
	当一个方法，自身不处理异常，而是要把异常交给方法的调用者来处理，
		此时我们throws在该方法上声明一个不需要自己处理的异常类型。（告诉调用者你需要处理什么类型的异常）
			//该方法中有一个或多个异常，自己不处理，抛给调用者处理
			private static int devide() throws Exception{
				//TODO
			}
			devide()方法的调用者，有两种异常处理的方式：
				1)自己使用try-catch来处理；
				2)自己也不处理，继续声明往外抛出异常。
	异常的分类：
		1)编译时期异常:checked:Exception类及子类。除了运行时期的异常，其他的都是编译时期的异常。
		2)运行时期异常：Runtime:RunTimeException类及其子类。
		编译时期的异常：要求我们必须处理异常（throws/try-catch），不处理就会编译错误。
		运行时期的异常：可处理，可不处理的异常。
		推荐使用运行时期异常。
		
	Throwable
		- Error
		- Exception
			-- 编译期异常（非运行期异常）：必须处理
				--- throws
				--- try...catch...
			-- 运行期异常：可处理，可不处理
	Exception异常是必须要处理的异常。

自定义异常：
	在开发中，比如业务逻辑有问题，此时我们需要专门定义一个异常类来表示业务逻辑异常。
	
	按以下步骤编写：
		1）首先自定义一个普通类LogicException；
		2）让LogicException继承Exception类或RuntimeException类；
		3）根据父类，提供构造；